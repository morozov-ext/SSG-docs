[{"content":"","date":"2025-01-29","id":0,"permalink":"/docs/overview/","summary":"","tags":[],"title":"Введение в документацию"},{"content":"","date":"2023-09-07","id":1,"permalink":"/docs/","summary":"","tags":[],"title":"Docs"},{"content":"","date":"2024-10-22","id":2,"permalink":"/docs/markdown/","summary":"","tags":[],"title":"Markdown"},{"content":"","date":"2024-10-22","id":3,"permalink":"/docs/git/","summary":"","tags":[],"title":"Git"},{"content":"В этом руководстве вы найдете инструкции для Markdown и Git, а в будущем и для HTML и CSS.\nПредполагается, что вы уже знакомы с базовыми командами интерфейса командной строки (CLI). Если нет, рекомендуем пройти бесплатный курс, например от Hexlet.\nТакже советуем:\nИзучать пункты Дополнительная информация в конце разделов. Это необязательная теоретическая база для урока и просто полезное чтение. При изучении команд Git заглядывать в раздел Параметры и экспериментировать с ними. Есть вопросы или предложения? Обращайтесь в наш Telegram-канал или пишите на электронную почту.\n","date":"2024-10-22","id":4,"permalink":"/docs/overview/start/","summary":"\u003cp\u003eВ этом руководстве вы найдете инструкции для \u003cstrong\u003e\u003ca href=\"/docs/markdown/introduction/\"\u003eMarkdown\u003c/a\u003e\u003c/strong\u003e и \u003cstrong\u003e\u003ca href=\"/docs/git/introduction/\"\u003eGit\u003c/a\u003e\u003c/strong\u003e, а в\nбудущем и для HTML и CSS.\u003c/p\u003e\n\u003cp\u003eПредполагается, что вы уже знакомы с базовыми командами \u003cstrong\u003eинтерфейса командной строки\u003c/strong\u003e (\u003cstrong\u003eCLI\u003c/strong\u003e). Если нет, рекомендуем пройти бесплатный курс, например от \u003ca href=\"https://ru.hexlet.io/courses/cli-basics\"\u003eHexlet\u003c/a\u003e.\u003c/p\u003e","tags":[],"title":"С чего начать?"},{"content":"Что такое Markdown? Markdown (Маркда́ун) — это легковесный язык разметки, то есть набор символов, которые стилизуют и придают структуру тексту.\nВы пишите текст в обычном текстовом редакторе по правилам синтаксиса Markdown, затем редакторы Markdown преобразуют этот текст в HTML, а браузер обрабатывает HTML и выводит на экран конечный результат.\nК слову, это руководство написано на Markdown.\nОбратите внимание\nЯзыки разметки не относятся к языкам программирования, так как не выполняют программные вычисления.\nСинтаксис Markdown в целом стандартизирован, но существуют разные диалекты, такие как CommonMark, GitHub Flavored Markdown, Multimarkdown. В них некоторые правила синтаксиса не совпадают, или появляются дополнительные функции. Например, H~2~O в одном случае обработается как H2O, а в другом — как H2O.\nЗачем использовать Markdown? Во-первых, Markdown очень прост в освоении. По сравнению с такими языками разметки, как HTML, его можно выучить гораздо быстрее.\nВо-вторых, Markdown стандартизирован. Любое устройство, которое может прочитать текстовый файл, отобразит синтаксис так, как задумывалось. И сейчас, и в будущем.\nВ-третьих, Markdown используется везде. GitHub, Telegram, Discord, Reddit и многие другие веб-сайты и приложения работают на основе Markdown.\nКак начать изучать Markdown? Лучше сразу на практике. Начните с базового синтаксиса и практикуйтесь.\nРекомендуем сначала пользоваться онлайн-редактором, например, Dilinger. Результат ввода кода сразу отображается в браузере, настраивать ничего не нужно. Если вам хочется локальный вариант, попробуйте легковесный редактор Notepad++ (доступ из России может быть затруднен) или VS Code.\n","date":"2024-10-22","id":5,"permalink":"/docs/markdown/introduction/","summary":"\u003ch2 id=\"mark-1\"\u003eЧто такое Markdown?\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eMarkdown\u003c/strong\u003e (Маркда́ун) — это легковесный \u003cstrong\u003eязык разметки\u003c/strong\u003e, то есть набор символов, которые стилизуют и придают структуру тексту.\u003c/p\u003e","tags":[],"title":"Введение в Markdown"},{"content":"Базовый синтаксис поддерживается практически всеми диалектами Markdown. Некоторые особенности могут отличаться, поэтому обращайте внимание на Лучшие практики по ходу документа.\nЗаголовки (Headings) Заголовки в Markdown бывают шести уровней. Первый уровень соответствует самому большому размеру шрифта, а шестой — самому маленькому.\nПоставьте решетку (#) для создания заголовка 1-го уровня, две решетки (##) для заголовка 2-го уровня и так далее.\nMarkdown Результат # Заголовок 1 Заголовок 1 ## Заголовок 2 Заголовок 2 ### Заголовок 3 Заголовок 3 #### Заголовок 4 Заголовок 4 ##### Заголовок 5 Заголовок 5 ###### Заголовок 6 Заголовок 6 Альтернативный способ: поставьте любое количество знаков равенства (=) для создания заголовка 1-го уровня или любое количество дефисов (-) для заголовка 2-го уровня.\nMarkdown Результат Заголовок 1-го уровня\n==== Заголовок 1 Заголовок 2-го уровня\n--- Заголовок 2 Лучшие практики\nОтделяйте # от текста пробелом. Отделяйте заголовки пустыми строками сверху и снизу. Параграфы (Paragraphs) и разрывы строк (Line Breaks) Чтобы создать параграф, поставьте пустую строку после текста, то есть нажмите Enter дважды. Если просто перенести текст на следующую строку, то он «склеится».\nMarkdown так устроен для удобства чтения при редактировании.\nMarkdown Результат Съешь еще этих булок.\nИ чайку выпей. Съешь еще этих булок.\u0026#x2705;\nИ чайку выпей. Съешь еще этих булок.\nИ чайку выпей. Съешь еще этих булок. И чайку выпей. \u0026#x274c; А чтобы перенести текст на следующую строку, используйте разрыв строки одним из способов:\nПоставьте два пробела после текста и нажмите Enter. Поставьте тег \u0026lt;br\u0026gt;. Нажимать Enter в этом случае необязательно. Обратите внимание\nТеги пришли в Markdown из языка разметки HTML. Они помогут там, где функций Markdown недостаточно. Но не все диалекты Markdown поддерживают теги HTML.\nMarkdown Результат Строка разорвана. Увы. Строка разорвана.\nУвы. Строка разорвана.\u0026lt;br\u0026gt;Увы. Строка разорвана.\nУвы. Лучшие практики\nНе используйте пробелы и табуляцию перед параграфами. Если ваш редактор Markdown поддерживает HTML, то \u0026lt;br\u0026gt; предпочтительнее двух пробелов за счет удобства чтения. Выделение текста (Emphasis) Текст можно выделить жирным или курсивом. Для этого оберните его звездочками (*) или подчеркиваниями (_):\nОдна пара символов (*) или (_) изменит начертание на курсивное; Две пары символов (**) или (__) изменят начертание на жирное; Три пары символов (***) или (___) изменят начертание на курсивное и жирное одновременно. * и _ можно даже чередовать, значение имеет только количество символов.\nMarkdown Результат _Курсивно_ Курсивно **Жирно** Жирно **_Жирно-курсивно_** Жирно-курсивно Лучшие практики\nВыберите один набор символов для каждого начертания. Например, _ для курсивного и ** для жирного. Если нужно выделить часть слова, используйте звездочки (*) для совместимости между редакторами Markdown. Цитаты (Quotes) Чтобы создать цитату, поставьте угловую скобку (\u0026gt;) в начале строки. Если строк несколько, ставьте \u0026gt; на каждой строке, включая пустые. Хотя некоторые редакторы Markdown допускают вставку \u0026gt; только на первой строке абзаца.\nВнутри цитат работают любые элементы синтаксиса Markdown, в том числе другие цитаты.\nMarkdown Результат Один мудрец произнес:\n\u0026gt; Корабли _лавировали_,\nда не вылавировали. Один мудрец произнес:\nКорабли лавировали,\nда не вылавировали. Один мудрец произнес:\n\u0026gt; Корабли лавировали,\n\u0026gt; да не вылавировали.\n\u0026gt;\n\u0026gt; Печально. Один мудрец произнес:\nКорабли лавировали,\nда не вылавировали.\nПечально. Цитаты можно вкладывать друг в друга. Для этого поставьте две и более угловые скобки (\u0026gt;).\nMarkdown Результат \u0026gt; Один мудрец произнес:\n\u0026gt;\n\u0026gt;\u0026gt; Корабли лавировали,\n\u0026gt;\u0026gt; да не вылавировали. Один мудрец произнес:\nКорабли лавировали,\nда не вылавировали. Лучшие практики\nОтделяйте \u0026gt; от текста пробелом. Отделяйте цитаты пустыми строками сверху и снизу. Ставьте \u0026gt; на каждой строчке для совместимости между редакторами Markdown. Списки (Lists) Нумерованный список (Ordered List) Чтобы создать нумерованный список (ordered list), поставьте число с точкой (1., 2. и т. д.) и пробел на каждой строке списка.\nНумерованный список должен начинаться с 1., но последующие числа могут быть любыми.\nMarkdown Результат 1. Первый пункт\n2. Второй пункт\n6. Третий пункт\n4. Четвертый пункт Первый пунктВторой пунктТретий пунктЧетвертый пункт Ненумерованный список (Unordered List) Чтобы создать ненумерованный список (unordered list), поставьте звездочку (*), или плюс (+), или минус (-) и пробел на каждой строке списка.\nMarkdown Результат * Яблоки\n* Бананы\n* Артишок ЯблокиБананыАртишок + Яблоки\n+ Бананы\n+ Артишок ЯблокиБананыАртишок - Яблоки\n- Бананы\n- Артишок ЯблокиБананыАртишок Вложенный список (Indented List) Список можно сделать вложенным, если поставить четыре пробела или табуляцию перед маркером (1., *, и т. д.). Нумерованные и ненумерованные списки можно вкладывать друг в друга.\nMarkdown Результат 1. Франция\n2. Россия\n* Москва\n* Пермь\n3. Германия ФранцияРоссияМоскваПермьГермания По такому же принципу вставляйте в список параграфы, цитаты, изображения, блоки кода.\nИсключение — блоки кода, которые отделяются восемью пробелами или двумя табуляциями.\nMarkdown Результат 1. Вот пункт один\n2. Вот пункт два\nЭтот пункт самый интересный\n3. Вот пункт три Вот пункт одинВот пункт дваЭтот пункт самый интересныйВот пункт три 1. Вот пункт один\n2. Вот пункт два\n\u0026gt; Этот пункт самый интересный\n3. Вот пункт три Вот пункт одинВот пункт дваЭтот пункт самый интересныйВот пункт три 1. Вот пункт один\n2. Вот пункт два\n![Выхухоль](/img/vih.png)\n3. Вот пункт три Вот пункт одинВот пункт дваВот пункт три 1. Вот пункт один\n2. Вот пункт два\n\u0026lt;html\u0026gt;\n\u0026lt;/html\u0026gt;\n3. Вот пункт три Вот пункт одинВот пункт два\n\u0026lt;html\u0026gt;\n\u0026lt;/html\u0026gt;Вот пункт три Лучшие практики\nНекоторые редакторы Markdown позволяют ставить 1) вместо 1. в нумерованных списках. Для лучшей совместимости используйте только 1.. Не чередуйте разные типы символов в ненумерованных списках, придерживайтесь одного формата. Вставка кода (Code) Чтобы вставить код как строчный элемент, оберните его одним или двумя обратными апострофами (`).\nMarkdown Результат Предположим, что `x=y`. Предположим, что x=y. Чтобы вставить блок кода, используйте один из способов:\nПоставьте в начале каждой строки четыре пробела или табуляцию; Оберните фрагмент кода тремя или более обратными апострофами (```). Markdown Результат \u0026lt;html\u0026gt;\n\u0026lt;body\u0026gt;\n\u0026lt;\\body\u0026gt;\n\u0026lt;\\html\u0026gt; \u0026lt;html\u0026gt;\n\u0026lt;head\u0026gt;\n\u0026lt;/head\u0026gt;\n\u0026lt;/html\u0026gt; ```\n\u0026lt;html\u0026gt;\n\u0026lt;body\u0026gt;\n\u0026lt;\\body\u0026gt;\n\u0026lt;\\html\u0026gt;\n``` \u0026lt;html\u0026gt;\n\u0026lt;head\u0026gt;\n\u0026lt;/head\u0026gt;\n\u0026lt;/html\u0026gt; Лучшие практики\nОтделяйте блоки кода пустыми строками сверху и снизу. Горизонтальный разделитель (Horizontal Rules) Горизонтальная линия-разделитель используется в основном для визуального разграничения частей контента.\nЧтобы создать горизонтальную линию, поставьте три и более звездочки (***), или подчеркивания (___), или минуса (---).\nMarkdown Результат *** ___ --- Лучшие практики\nОтделяйте горизонтальный разделитель пустыми строками сверху и снизу. Иначе редактор Markdown может расценить символы --- как заголовок 2-го уровня. Ссылки (Links) Строчные Чтобы создать строчную ссылку на веб-сайт или электронную почту, оберните URL угловыми скобками (\u0026lt;URL\u0026gt;).\nMarkdown Результат \u0026lt;https://ru.wikipedia.org\u0026gt; https://ru.wikipedia.org \u0026lt;morozov.ext@gmail.com\u0026gt; morozov.ext at gmail dot com\rЧтобы ссылка отображалась как текст, оберните сам текст квадратными скобками, а затем URL круглыми скобками ([Текст ссылки](URL)). Для ссылки на электронную почту в этом варианте нужно перед URL добавить mailto: ([текст ссылки](mailto:URL)).\nТакже можно добавить подсказку при наведении. После URL поставьте пробел и оберните текст подсказки кавычками ([текст ссылки](URL \u0026quot;подсказка\u0026quot;))\nMarkdown Результат [Википедия](https://ru.wikipedia.org \u0026ldquo;Вики\u0026rdquo;) Википедия [Наш email](mailto:morozov.ext@gmail.com) morozov.ext at gmail dot com/\rСправочные Справочные ссылки состоят из двух частей: текста ссылки и сноски, в которой указана полная ссылка. В некоторых случаях это может быть удобнее для редактирования, чем строчные ссылки.\nДля создания справочной ссылки:\nОберните сам текст, а затем название сноски, квадратными скобками ([текст ссылки][название сноски]); Создайте в любом месте документе конструкцию [название сноски]: URL. Также можно добавить подсказку при наведении: [название сноски]: URL \u0026quot;подсказка\u0026quot;. Markdown Результат Как писал Эдвард Григ, [музыка][1]\u0026hellip;\n[1]: https://ru.wikipedia.org/wiki/Григ,_Эдвард Как писал Эдвард Григ, музыка\u0026hellip; Лучшие практики\nЕсли в ссылке есть пробелы, заменяйте их на %20. Если в ссылке есть круглые скобки, заменяйте открывающую скобку (() на %28, а закрывающую ()) — на %29. Изображения (Images) Чтобы вставить изображение, поставьте восклицательный знак (!), а затем используйте синтаксис обычной ссылки (![текст](/img/vih.png)).\nMarkdown Результат ![Выхухоль обыкновенный](/img/vih.png) Обратите внимание\nСредствами Markdown нельзя изменить размер изображения. Используйте тег HTML вида:\n\u0026lt;img src=\u0026ldquo;image.png\u0026rdquo; width=\u0026ldquo;200\u0026rdquo; height=\u0026ldquo;100\u0026rdquo;\u0026gt;\nЭкранирование (Escaping Characters) Если вам понадобится вставить один из символов `*_{}[]\u0026lt;\u0026gt;()#+-.!| как текст, может возникнуть проблема. Markdown использует эти символы в своем синтаксисе и в определенном контексте расценивает их как код.\nТогда эти символы можно экранировать. Поставьте обратную косую черту (\\) перед символом.\nMarkdown Результат ![Выхухоль обыкновенный](/img/vih.png) ![Выхухоль обыкновенный]\\(/img/vih.png) ![Выхухоль обыкновенный]\\(/img/vih.png) Дополнительная информация Инструкции на английском с сайта markdownguide.org; Инструкция на русском с сайта skilbox.ru; Инструкция на русском с сайта doka.guide. ","date":"2024-10-22","id":6,"permalink":"/docs/markdown/basic-syntax/","summary":"\u003cp\u003eБазовый синтаксис поддерживается практически всеми \u003ca href=\"../introduction/#mark-1\"\u003eдиалектами\u003c/a\u003e Markdown. Некоторые особенности могут отличаться,\nпоэтому обращайте внимание на \u003cstrong\u003eЛучшие практики\u003c/strong\u003e по ходу документа.\u003c/p\u003e\n\u003ch2 id=\"заголовки-headings\"\u003eЗаголовки (Headings)\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eЗаголовки\u003c/strong\u003e в Markdown бывают шести уровней. Первый уровень соответствует\nсамому большому размеру шрифта, а шестой — самому маленькому.\u003c/p\u003e","tags":[],"title":"Базовый синтаксис"},{"content":"Не все диалекты Markdown поддерживают расширенный синтаксис. Сверяйтесь с документацией и проверяйте доступные расширения.\nТаблицы (Tables) Чтобы вставить таблицу, создайте с помощью спецсимволов следующую структуру:\n| Заголовок | Описание |\n| ------------------------ | ----------------------- |\n| Элемент | Текст |\n| Элемент | Текст |\nПри этом:\nДефисов (-) должно быть три или больше. Ячейки могут содержать любое количество знаков, не обязательно делать их симметричными. В таблицах можно использовать ссылки, код, выделять текст.\nВ таблицах нельзя использвать заголовки, цитаты, горизонтальные разделители, блоки кода, изображения.\nОбратите внимание\nВы можете использовать многие теги HTML в таблицах.\nС помощью двоеточия (:) можно задать выравнивание:\n| Заголовок | Описание |\n| :----------------------- | ---------------------: |\n| Элемент | Текст |\n| Элемент | Текст |\n:--- для выравнивания по левому краю; :---: для выравнивания по центру; ---: для выравнивания по правому краю. Обратите внимание\nСоздавать таблицы в Markdown не очень удобно, поэтому можете попробовать конструктор таблиц Tables Generator.\nПодсветка синтаксиса (Syntax Highlighting) В блоках кода можно использовать подсветку для любого языка программирования. Укажите язык программирования после трех обратных апострофов (```).\nMarkdown Результат ```json\n{\ngit config \u0026ndash;global user.name \u0026ldquo;\u0026lt;имя фамилия\u0026gt;\u0026quot;\ngit config \u0026ndash;global user.email \u0026ldquo;\u0026lt;ваш email\u0026gt;\u0026quot;\n}\n``` { git config --global user.name \u0026#34;\u0026lt;имя фамилия\u0026gt;\u0026#34; git config --global user.email \u0026#34;\u0026lt;ваш email\u0026gt;\u0026#34; }\rСноски (Footnotes) Синтаксис сносок похож на синтаксис справочных ссылок.\nЧтобы создать сноску:\nПоставьте [^1] следом за текстом. Кроме чисел можно использовать текст, например, [^сноска]. Создайте в любом месте документе конструкцию:\n[^название сноски]: описание сноски. Markdown Результат Съешь этих мягких булок[^1]! Съешь этих мягких булок1 [^1]: Подразумеваются хрустящие булки 1. Подразумеваются хрустящие булки. ID заголовков (Headings ID) После заголовка поставьте решетку (#) с уникальным кодом ID и заключите их в фигурные скобки ({}). ID может включать буквы, числа и специальные знаки.\nID позволяют оформлять заголовки в CSS и вставлять на них ссылки.\nСсылаться на заголовок можно прямо из текущего документа. Используйте синтаксис обычной ссылки, но в круглых скобках поставьте решетку (#) с кодом ID.\nMarkdown Результат ### Супер заголовок {#head-ID} Супер заголовок [Супер заголовок](#head-ID) Супер заголовок Списки с определениями (Definition Lists) Чтобы создать список с определениями:\nНа первой строке напишите термин; На второй строке и последующих строках поставьте двоеточие (:), пробел и определение. Markdown Результат Мышь\n: Мелкое млекопитающее\n: Устройство для компьютера МышьМелкое млекопитающее.Устройство для компьютера. Зачеркивание (Strikethrough) Поставьте две тильды (~~) до и после текста, который хотите зачеркнуть.\nMarkdown Результат Хочу ~~два~~ три пончика Хочу два три пончика Списки задач (Task Lists) Используйте синтаксис ненумерованного списка и добавьте отмеченные флажки ([x]) и неотмеченные флажки ([ ]) после маркеров.\nMarkdown Результат - [x] Проснуться\n- [ ] Потянуться\n- [ ] Заснуть Проснуться Потянуться Заснуть Подсветка текста (Highlight) Чтобы подсветить текст, то есть выделить цветом, используйте два знака равенства (==) до и после текста.\nMarkdown Результат Сайт сделан на ==Hugo== Сайт сделан на Hugo. Подстрочный и надстрочный текст (Subscript and Superscript) Чтобы сделать текст подстрочным, поставьте тильду (~) до и после текста.\nЧтобы сделать текст надстрочным, поставьте знак возведения в степень (^) до и после текста.\nMarkdown Результат H~2~O H2O x^2+y^2=13 x2+y2=13 Внимание!\nВ некоторых диалектах Markdown один значок тильды (~) зачеркивает текст, а не делает его подстрочным.\nДополнительная информация Инструкции на английском с сайта markdownguide.org; Инструкция на русском с сайта skilbox.ru; Инструкция на русском с сайта doka.guide. ","date":"2024-10-22","id":7,"permalink":"/docs/markdown/extended-syntax/","summary":"\u003cp\u003eНе все \u003ca href=\"../introduction/#mark-1\"\u003eдиалекты\u003c/a\u003e Markdown поддерживают расширенный синтаксис. Сверяйтесь с документацией и проверяйте доступные\nрасширения.\u003c/p\u003e\n\u003ch2 id=\"таблицы-tables\"\u003eТаблицы (Tables)\u003c/h2\u003e\n\u003cp\u003eЧтобы вставить \u003cstrong\u003eтаблицу\u003c/strong\u003e, создайте с помощью спецсимволов следующую структуру:\u003c/p\u003e","tags":[],"title":"Расширенный синтаксис"},{"content":"Git — это система контроля версий (VCS). Разработчики используют VCS для работы с кодом, когда требуется:\nПосмотреть историю изменений; Вернуться к любой предыдущей версии; Оптимизировать и обезопасить совместную работу. На сегодняшний день Git используется при разработке практически любого IT-проекта.\nПредставьте, что несколько программистов пытаются работать параллельно над одним и тем же файлом, или вдруг выясняется, что необходимо вернуться к исходному состоянию. Без системы контроля версий в разработке творился бы хаос.\nВероятно, вы слышали о GitHub и GitLab. Это облачные сервисы для хранения и управления репозиториями Git. Как правило, именно на них команды разработки загружают код своих проектов.\nПринцип работы Git Представьте, что вы хотите отслеживать все изменения в каком-либо файле. Для этого вы должны поместить его в репозиторий — хранилище всех версий файлов.\nФайл под версионным контролем Git может находиться в трех областях:\nРабочая директория (working directory) — рабочая область. Там вы создаете, изменяете и удаляете файлы. Индекс (staging area) — подготовительная область. Туда вы отправляете файлы, которые хотите поместить под версионный контроль. Репозиторий (repository) — хранилище версий, куда попадает файлы из индекса. На иллюстрации ниже изображен путь файла из рабочей директории в репозиторий и основные команды для этого. Здесь есть дополнительный шаг — перемещение в удаленный репозиторий, такой как GitHub.\nКогда вы окончательно фиксируете версию файла в репозитории, то вы делаете коммит. При коммите Git навсегда запоминает файл и начинает отслеживать его историю.\nПодробнее с этим процессом вы познакомитесь в разделе Создание репозитория.\nКогда вы делаете коммит, Git создает снимок состояния (snapshot) проекта. Он перезаписывает не каждый файл, а только измененные. Визуально это выглядит так:\nДополнительная информация Что такое Git? О системе контроля версий ","date":"2024-10-22","id":8,"permalink":"/docs/git/introduction/","summary":"\u003cp\u003e\u003cstrong\u003eGit\u003c/strong\u003e — это \u003cstrong\u003eсистема контроля версий (VCS)\u003c/strong\u003e. Разработчики используют VCS для работы с кодом, когда требуется:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eПосмотреть историю изменений;\u003c/li\u003e\n\u003cli\u003eВернуться к любой предыдущей версии;\u003c/li\u003e\n\u003cli\u003eОптимизировать и обезопасить совместную работу.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eНа сегодняшний день Git используется при разработке практически любого IT-проекта.\u003c/p\u003e","tags":[],"title":"Введение в Git"},{"content":"Well-thought-through product announcements will help increase feature awareness and engage users with new functionality. Just like sharing your public roadmap, it\u0026rsquo;s also a great way to let potential customers see that you\u0026rsquo;re constantly improving.\nFurther reading Read How to announce product updates and features ","date":"2023-09-07","id":9,"permalink":"/notes/example-post/","summary":"You can use blog posts for announcing product updates and features.","tags":[],"title":"Example Post"},{"content":"","date":"2023-09-07","id":10,"permalink":"/blog/","summary":"","tags":[],"title":"Blog"},{"content":"Windows Перейдите на страницу загрузки Git на официальном сайте. Вы можете скачать последнюю поддерживаемую сборку, любую другую подходящую версию или использовать инструмент WinGet.\nЗапустите инсталлятор и следуйте инструкциям. Если хотите изменить компоненты по умолчанию, ознакомьтесь с описанием настроек.\nАльтернативный вариант — установите Git через WSL (Windows Subsystem for Linux). Это простой способ запустить среду Linux прямо в Windows без всяких виртуальных машин. Заодно вы сразу начнете осваивать Linux.\nОбратите внимание\nВ пакет установки входит Git Bash. Это приложение командной строки для Windows для ввода команд Git и Bash. Используйте его в этих уроках.\nLinux и MacOS Установите Git через пакетные менеджеры:\nUbuntu\rMacOS\rsudo apt update # Проверяем актуальность версии sudo apt install git-all\rbrew install git\rПервоначальная настройка После установки Git вам нужно задать имя пользователя и адрес электронной почты. Эта информация будет включена в каждый последующий коммит.\n# Выполняется из любой директории git config --global user.name \u0026#34;\u0026lt;имя фамилия\u0026gt;\u0026#34; git config --global user.email \u0026#34;\u0026lt;ваш email\u0026gt;\u0026#34;\rЕсли хотите поменять имя и адрес, выполните команды еще раз. Чтобы посмотреть текущие настройки, используйте команду git config --list. Настройки хранятся в вашей системе в директории ~/.gitconfig или ~/.config/git/config. Редактор кода Если вы еще не пользовались специализированными редакторами кода, то сейчас самое время начать. Они облегчают работу за счет таких функций, как:\nПодсветка синтаксиса; Автоматическая расстановка отступов; Автозаполнение; Быстрое переключение между файлами; Запуск, компиляция и отладка кода. Мы рекомендуем бесплатные редакторы Visual Studio Code или Notepad++, хотя можете выбрать любой другой.\nДополнительные материалы Установка Git Что такое WSL? ","date":"2025-02-10","id":11,"permalink":"/docs/git/installation/","summary":"\u003ch2 id=\"windows\"\u003eWindows\u003c/h2\u003e\n\u003cp\u003eПерейдите на \u003ca href=\"https://git-scm.com/downloads/win\"\u003eстраницу загрузки Git\u003c/a\u003e на\nофициальном сайте. Вы можете скачать\n\u003ca href=\"https://github.com/git-for-windows/git/releases/download/v2.47.1.windows.2/Git-2.47.1.2-64-bit.exe\"\u003eпоследнюю поддерживаемую сборку\u003c/a\u003e,\nлюбую другую подходящую версию или использовать инструмент \u003ca href=\"https://learn.microsoft.com/en-us/windows/package-manager/winget/\"\u003eWinGet\u003c/a\u003e.\u003c/p\u003e","tags":[],"title":"Установка"},{"content":"Инициализация репозитория Локальный репозиторий — это, по сути, обычная директория, помещенная под версионный контроль. Для создания нового проекта выполните следующие шаги:\nСоздайте новую директорию:\nmkdir git-repo\rПерейдите в созданную директорию:\ncd git-repo\rСоздайте git-репозиторий:\ngit init\rМожете перейти в директорию с вашим новым проектом и убедиться, что в ней появились новые файлы. Однако не все содержимое /git-repo называется репозиторием.\nРепозиторий — автоматически созданная директория .git. Она находится под версионным контролем. Рабочая директория — хранилище для файлов. Файлы в ней еще не включены в версионный контроль. Добавление файлов Напоминаем, что файлы в репозитории могут быть в нескольких состояниях. Чтобы проверить статус репозитория и узнать, в каком состоянии находятся файлы, введите команду:\n$ git status On branch main No commits yet nothing to commit (create/copy files and use \u0026#34;git add\u0026#34; to track)\rРепозиторий пуст, на это указывает строка nothing to commit. Добавьте пару файлов и еще раз проверьте статус репозитория.\necho \u0026#39;Hello, world!\u0026#39; \u0026gt; README.md echo \u0026#39;Albert Einstein\u0026#39; \u0026gt; PEOPLE.md\rОбратите внимание\nНазвания файлов нечувствительны к регистру в Windows и MacOS, но чувствительны в Linux. Во избежание путаницы приучите себя соблюдать регистр.\n$ git status On branch main No commits yet Untracked files: (use \u0026#34;git add \u0026lt;file\u0026gt;...\u0026#34; to include in what will be committed) PEOPLE.md README.md nothing added to commit but untracked files present (use \u0026#34;git add\u0026#34; to track)\rВ проекте появились добавленные вами файлы со статусом untracked. Untracked (неотслеживаемые) файлы — это файлы, которые еще не добавлены в репозиторий, и Git не отслеживает в них изменения.\nНо вы не можете сразу зафиксировать файл в системе контроля версий. Сначала его надо индексировать, то есть подготовить к дальнейшей работе.\ngit add README.md\rВажно!\nКоманда git add не добавляет файл, она подготавливает изменения. Если вам надо внести в индекс информацию о том, что файл удален, вы тоже используете git add.\nПроверьте статус репозитория.\n$ git status On branch main No commits yet Changes to be committed: (use \u0026#34;git rm --cached \u0026lt;file\u0026gt;...\u0026#34; to unstage) new file: README.md Untracked files: (use \u0026#34;git add \u0026lt;file\u0026gt;...\u0026#34; to include in what will be committed) PEOPLE.md\rТеперь файл README.md находится в состоянии staged (индексирован), а PEOPLE.md остался в состоянии untracked. Это значит, что дальнейшие изменения не затронут PEOPLE.md.\nПоследний шаг — это коммит. На этом этапе файл добавляется в систему контроля версий, и все дальнейшие операции с ним отслеживаются. Для описания коммита используется параметр -m.\nОбратите внимание\nСтарайтесь описывать коммиты емко и по существу, вам не раз придется искать нужный коммит среди десятков других. Соблюдайте принятые стандарты при работе над совместными проектами.\n$ git commit -m \u0026#39;add README.md\u0026#39; [main (root-commit) b9720a4] add README.md 1 file changed, 1 insertion(+) create mode 100644 README.md\rПроверьте статус репозитория.\n$ git status On branch main Untracked files: (use \u0026#34;git add \u0026lt;file\u0026gt;...\u0026#34; to include in what will be committed) PEOPLE.md nothing added to commit but untracked files present (use \u0026#34;git add\u0026#34; to track)\rКак видно, команда git status не показывает файлы в стадии commited.\nМы провели полную процедуру от добавления файла до коммита. Это – основная суть работы с Git. Теперь сделайте самостоятельно коммит файла PEOPLE.md и переходите к следующему уроку.\nДополнительная информация Как получить помощь? Соглашение о коммитах ","date":"2025-02-19","id":12,"permalink":"/docs/git/first-repository/","summary":"\u003ch2 id=\"инициализация-репозитория\"\u003eИнициализация репозитория\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eЛокальный репозиторий\u003c/strong\u003e — это, по сути, обычная директория, помещенная под\nверсионный контроль. Для создания нового проекта выполните следующие шаги:\u003c/p\u003e","tags":[],"title":"Создание репозитория"},{"content":"Регистрация Вероятно, сейчас или в будущем вы захотите разрабатывать проекты совместно с другими разработчиками. Для этого вам потребуется зарегистрироваться в GitHub. Напоминаем, что GitHub — это облачная платформа для хостинга Git-репозиториев.\nВ подавляющем большинстве случаев разработчики выкладывают свои open-source проекты именно на GitHub, но есть и другие сервисы. Например, GitLab, Bitbucket, Azure DevOps.\nSSH-ключи Когда вы связываетесь с серверами GitHub через командную строку, вы используете один из двух протоколов безопасности: SSH и HTTPS. HTTPS проще в настройке, но SSH обеспечивает более высокий уровень безопасности. В этой инструкции мы воспользуемся SSH.\nС помощью SSH-ключа вы сможете подключаться к GitHub без необходимости каждый раз вводить данные для аутентификации.\nСоздание ключа Сгенерируйте SSH-ключ в вашей системе ssh-keygen -t ed25519 -C \u0026#34;\u0026lt;ваш_email\u0026gt;\u0026#34;\rКогда появится запрос Enter a file in which to save the key, нажмите Enter. Ключ появится в директории по умолчанию ~/.ssh/\nКогда появится запрос Enter passphrase (empty for no passphrase), придумайте и введите пароль для SSH-ключа.\n\u0026gt; Enter passphrase (empty for no passphrase): \u0026lt;ваш_пароль\u0026gt; \u0026gt; Enter same passphrase again: \u0026lt;ваш_пароль_повторно\u0026gt;\rАктивируйте SSH-агент и добавьте в него SSH-ключ SSH-агент — это программа, которая хранит ваши SSH-ключи и предоставляет их GitHub по запросу.\n# Запустить агент SSH eval \u0026#34;$(ssh-agent -s)\u0026#34;\r# Добавить SSH-ключ в агент ssh-add ~/.ssh/id_ed25519\rДобавление SSH-ключа в учетную запись GitHub Скопируйте ключ в буфер обмена. Bash\rPowerShell\rWSL\rclip \u0026lt; ~/.ssh/id_ed25519.pub\rcat ~/.ssh/id_ed25519.pub | clip\rclip.exe \u0026lt; ~/.ssh/id_ed25519.pub\rВ вашем аккаунте GitHub откройте настройки и перейдите на вкладку SSH and GPG keys. Нажмите кнопку New SSH key. Напишите любое название в поле Title и вставьте из буфера обмена SSH-ключ в поле Key. В поле Key type выберите Authentication Key . Нажмите Add SSH key. Создание удаленного репозитория Перейдите на страницу с вашими проектами и нажмите кнопку New. Введите имя проекта в поле Repository name. (опционально) Введите описание проекта в поле Description. Выберите тип проекта. Публичный виден всем, приватный — только вам. (опционально) Создайте дополнительные файлы: README.md — описание проекта. Мы его уже создали, пропустите этот шаг. .gitignore — список игнорируемых файлов. Не всегда имеет смысл загружать на GitHub все файлы из локального репозитория. Лицензия — позволяет или запрещает другим использовать ваш код. Нажмите кнопку Create repository. Связывание локального и удаленного репозиториев Теперь у вас есть два репозитория: в вашей системе и на GitHub. Осталось их связать, чтобы в дальнейшем изменения синхронизировались.\nОбратите внимание\nКоманды выполняются из директории проекта.\nСвяжите репозитории командой git remote add, которая принимает два аргумента:\nНазвание удаленного репозитория, как правило, origin; URL-адрес удаленного репозитория. git remote add origin git@github.com:\u0026lt;псевдоним_на_github\u0026gt;/\u0026lt;имя_проекта\u0026gt;.git\r(опционально) Переименуйте основную ветку. По умолчанию основная ветка в Git называется master, а в GitHub – main. Неважно, какое название вы выберете, главное, чтобы оно совпадало.\ngit branch -M main\rЗапушьте (отправьте) ваш локальный репозиторий на сервер. Параметр -u используется только первый раз, он связывает ветки. В дальнейшем достаточно писать git push.\ngit push -u origin main\rЕсли вы увидите следующее сообщение, то введите yes.\nThe authenticity of host \u0026#39;github.com (140.82.121.4)\u0026#39; can\u0026#39;t be established. ... Are you sure you want to continue connecting (yes/no/[fingerprint])\rГотово. Можете обновить страницу и изучить структуру вашего нового репозитория на GitHub.\nДополнительная информация Сведения о протоколе SSH Создание нового ключа SSH Почему ветка master стала main? ","date":"2025-02-12","id":13,"permalink":"/docs/git/integration/","summary":"\u003ch2 id=\"регистрация\"\u003eРегистрация\u003c/h2\u003e\n\u003cp\u003eВероятно, сейчас или в будущем вы захотите разрабатывать проекты \u003ca href=\"/docs/git/introduction\"\u003eсовместно с другими разработчиками\u003c/a\u003e. Для этого вам потребуется зарегистрироваться в \u003ca href=\"https://github.com/signup\"\u003eGitHub\u003c/a\u003e. Напоминаем, что GitHub — это облачная платформа для хостинга Git-репозиториев.\u003c/p\u003e","tags":[],"title":"Интеграция с GitHub"},{"content":"Продолжим работу с репозиторием, который вы недавно создали. На данный момент все измененные файлы уже внесены в коммиты, а рабочий каталог чист.\n$ git status On branch main Your branch is up to date with \u0026#39;origin/main\u0026#39;. nothing to commit, working tree clean\rОтмена изменений На любой стадии до выполнения коммита изменения можно откатить.\nВажно!\nПосле отката изменения уже не вернуть. Будьте внимательны и не выполняйте команды \u0026ldquo;на автомате\u0026rdquo;.\nНеотслеживаемые файлы Создайте несколько любых файлов:\n$ touch hello $ mkdir bonjour $ git status On branch main Your branch is up to date with \u0026#39;origin/main\u0026#39;. Untracked files: (use \u0026#34;git add \u0026lt;file\u0026gt;...\u0026#34; to include in what will be committed) hello\rФайлы и пустые папки из рабочей директории, которые еще не зафиксированы в репозитории, удаляются командой git clean -fd.\nПараметр f — принудительное удаление; Параметр d — удаление папок. $ git clean -f $ git status On branch main Your branch is up to date with \u0026#39;origin/main\u0026#39;. nothing to commit, working tree clean\rИзмененные файлы Измените один из существующих файлов:\n$ echo \u0026#39;Nikola Tesla\u0026#39; \u0026gt;\u0026gt; PEOPLE.md $ git status On branch main Your branch is up to date with \u0026#39;origin/main\u0026#39;. Changes not staged for commit: (use \u0026#34;git add \u0026lt;file\u0026gt;...\u0026#34; to update what will be committed) (use \u0026#34;git restore \u0026lt;file\u0026gt;...\u0026#34; to discard changes in working directory) modified: PEOPLE.md no changes added to commit (use \u0026#34;git add\u0026#34; and/or \u0026#34;git commit -a\u0026#34;)\rИзменененные файлы, которые еще не попали в индекс, откатываются до предыдущего состояния командой git restore \u0026lt;имя_файла\u0026gt;.\n$ git restore PEOPLE.md $ git status On branch main Your branch is up to date with \u0026#39;origin/main\u0026#39;. nothing to commit, working tree clean\rИндексированные файлы Измените один из существующих файлов и добавьте его в индекс:\n$ echo \u0026#39;Nikola Tesla\u0026#39; \u0026gt;\u0026gt; PEOPLE.md $ git add PEOPLE.md $ git status On branch main Your branch is up to date with \u0026#39;origin/main\u0026#39;. Changes to be committed: (use \u0026#34;git restore --staged \u0026lt;file\u0026gt;...\u0026#34; to unstage) modified: PEOPLE.md\rИндексированные файлы восстанавливаются командой git restore --staged \u0026lt;имя_файла\u0026gt;.\nПри этом изменения не откатываются, а просто убираются из индекса. Чтобы теперь отменить изменения, выполните git restore из предыдущего шага.\n$ git restore --staged PEOPLE.md $ git status On branch main Your branch is up to date with \u0026#39;origin/main\u0026#39;. Changes not staged for commit: (use \u0026#34;git add \u0026lt;file\u0026gt;...\u0026#34; to update what will be committed) (use \u0026#34;git restore \u0026lt;file\u0026gt;...\u0026#34; to discard changes in working directory) modified: PEOPLE.md no changes added to commit (use \u0026#34;git add\u0026#34; and/or \u0026#34;git commit -a\u0026#34;)\r$ git restore PEOPLE.md $ git status On branch main Your branch is up to date with \u0026#39;origin/main\u0026#39;. nothing to commit, working tree clean\rОтмена коммитов Изменения в файлах рабочей директории — это рядовая ситуация. Пока файлы не попали в коммит, система контроля версий еще не записала их в историю. А вот к отмене коммитов лучше отнестись внимательнее и не \u0026ldquo;мусорить\u0026rdquo; в проекте.\ngit revert Представьте, что вы сделали коммит, а потом поняли, что эти изменения были не нужны. А может, это было даже несколько коммитов назад. Но историю коммитов вы не хотите перезаписывать, чтобы не ломать структуру проекта.\nСделайте пару коммитов, например:\ngit rm PEOPLE.md git commit -m \u0026#39;delete PEOPLE.md\u0026#39; git echo \u0026#39;Mercury\u0026#39; \u0026gt; PLANETS.md git add PLANETS.md git commit -m \u0026#39;add PLANETS.md\u0026#39;\rИ тут вы понимаете, что PEOPLE.md удалять было не нужно. Чтобы не проводить обратную операцию, используйте команду git revert \u0026lt;хеш_коммита\u0026gt;.\nХеш коммита — это уникальный идентификатор для каждого отдельного коммита. Его можно узнать командой git log. Подробнее об этом — в разделе История.\n$ git log --oneline fd420ae (HEAD -\u0026gt; main) add PLANETS.md d8756eb delete PEOPLE.md 3810583 (origin/main) add PEOPLE.md 5811348 add README.md\rНайдите хеш коммита, который вы хотели бы отменить. Причем нужны только первые семь цифр, остальные вводить необязательно.\nА теперь выполните команду git revert.\ngit revert d8756eb\rОткроется консольный текстовый редактор nano. В нем вам предложат изменить название нового коммита. Оставьте фразу по умолчанию и нажмите CTRL+X для выхода из nano.\nГотово, коммит отменен.\ngit reset Но бывает и другая ситуация: вам нужно полностью удалить коммит с изменением истории. Может, вы только что по ошибке сделали коммит и уверены, что никто еще не успел продолжить работу с этой версией. Тогда допустимо использовать команду git reset.\nСделайте какой-нибудь коммит, например:\necho \u0026#39;Vulkan\u0026#39; \u0026gt;\u0026gt; PLANETS.md git commit PLANETS.md -m \u0026#39;modify PLANETS.md\u0026#39;\rКстати, для быстрого коммита без ручного добавления в индекс можно использовать git commit \u0026lt;имя_файла\u0026gt; -m '\u0026lt;описание_коммита\u0026gt;'\nВыполните команду git reset --hard HEAD~1.\nПараметр --hard — полное удаление. Если его не ставить, то по умолчанию используется параметр --mixed, и изменения последнего коммита отправляются в рабочую директорию. HEAD~1 — это последний сделанный коммит. Если нужно удалить два коммита, то используется HEAD~2, и т. д. $ git reset --hard HEAD~1 $ git log --oneline b317d23 (HEAD -\u0026gt; main) Revert \u0026#34;delete PEOPLE.md\u0026#34; fd420ae add PLANETS.md d8756eb delete PEOPLE.md 3810583 (origin/main) add PEOPLE.md 5811348 add README.md\rГотово, целевой коммит и все последующие удалены.\nДополнительная информация Операции отмены ","date":"2025-02-23","id":14,"permalink":"/docs/git/modify/","summary":"\u003cp\u003eПродолжим работу с репозиторием, который вы недавно \u003ca href=\"/docs/git/first-repository/\"\u003eсоздали\u003c/a\u003e. На данный момент все измененные файлы уже внесены в коммиты, а\nрабочий каталог чист.\u003c/p\u003e","tags":[],"title":"Внесение изменений"},{"content":"Для понимания принципов работы Git нужно уяснить несколько моментов:\nВетка представляет собой односвязный список, т.е. каждый новый коммит базируется на предыдущем. Git стремится двигаться только вперед. Удаление файла — это, как правило, новый коммит, а не изменение старого. В любой момент разработчик может посмотреть изменения от самого первого до последнего коммита. Благодаря этим принципам Git является строго упорядоченной системой версий, и работать с историей изменений в нем очень удобно.\nАнализ изменений Предположим, что у вас есть несколько файлов, которые еще не попали в коммит, но вы уже запутались. Где что удалялось, где что добавлялось?\nДля анализа изменений в файлах используется команда git diff.\nВнесите изменения в два файла, как показано ниже. Не добавляйте их в индекс.\n$ echo \u0026#39;Venus\u0026#39; \u0026gt;\u0026gt; PLANETS.md $ echo \u0026#39;This is a real deal\u0026#39; \u0026gt; README.md\rА теперь выполните команду git diff и изучите полученные данные.\n$ git diff diff --git a/PLANETS.md b/PLANETS.md # Показывает, что сравниваются две версии файла index 5857748..725a5a9 100644 --- a/PLANETS.md # Оригинальный файл +++ b/PLANETS.md # Измененный файл @@ -1 +1,2 @@ Mercury # Строка без изменений +Venus # Добавленная строка diff --git a/README.md b/README.md index af5626b..d965296 100644 --- a/README.md +++ b/README.md @@ -1 +1 @@ -Hello, world! # Удаленная строка +This is a real deal # Добавленная строка\rЗапись @@ -1 +1,2 @@ — это индикатор измененных строк, где - указывает на оригинальный файл, а + — на измененный. При этом:\n-1 — изменения произошли в первой строке оригинального файла; +1,2 — изменения произошли в двух строках измененного файла, начиная с первой. Чтобы сравнить индексированные файлы, добавьте параметр --staged. Хорошей привычкой будет проверять изменения перед коммитом.\ngit diff --staged\rИстория коммитов Точное содержание своих коммитов, не говоря уже о чужих, легко забыть. Работа идет непрерывно, информации много. Рассмотрим основные команды для просмотра истории.\ngit log Команда git log выводит список всех коммитов, из которого можно узнать:\nхеш коммита; описание коммита; автора коммита; дату коммита; текущую ветку и позицию HEAD; последнюю синхронизацию с удаленным репозиторием. Последний коммит будет вверху списка.\n$ git log Author: moroz \u0026lt;morozov.ext@gmail.com\u0026gt; Date: Mon Feb 24 12:50:40 2025 +0300 Revert \u0026#34;delete PEOPLE.md\u0026#34; This reverts commit d8756ebeca1b77dc0ba5f9e28d0e60e0e406e3b2. commit fd420ae3f1265fe8010da815304d1841a9402cf0 Author: moroz \u0026lt;morozov.ext@gmail.com\u0026gt; Date: Mon Feb 24 12:24:27 2025 +0300 add PLANETS.md commit d8756ebeca1b77dc0ba5f9e28d0e60e0e406e3b2 Author: moroz \u0026lt;morozov.ext@gmail.com\u0026gt; Date: Mon Feb 24 12:19:12 2025 +0300 delete PEOPLE.md commit 3810583635cdf072688b8ee541b0b1148515fc5b (origin/main) Author: moroz \u0026lt;morozov.ext@gmail.com\u0026gt; Date: Sun Feb 23 13:57:46 2025 +0300 add PEOPLE.md commit 5811348e0b043f5d0738d17d1e2596daef9919e8 Author: moroz \u0026lt;morozov.ext@gmail.com\u0026gt; Date: Sun Feb 23 13:57:25 2025 +0300 add README.md\rНо в большинстве случаев достаточно сокращенного вывода с добавочным параметром --oneline.\n$ git log --oneline b317d23 (HEAD -\u0026gt; main) Revert \u0026#34;delete PEOPLE.md\u0026#34; fd420ae add PLANETS.md d8756eb delete PEOPLE.md 3810583 (origin/main) add PEOPLE.md 5811348 add README.md\rПосмотреть разницу между коммитами можно с помощью параметра -p. Также вы можете ограничить количество выведенных коммитов, например, двумя, дописав -2.\n$ git log -p -2 --oneline b317d23 (HEAD -\u0026gt; main) Revert \u0026#34;delete PEOPLE.md\u0026#34; diff --git a/PEOPLE.md b/PEOPLE.md new file mode 100644 index 0000000..2921ab7 --- /dev/null +++ b/PEOPLE.md @@ -0,0 +1 @@ +Albert Einstein fd420ae add PLANETS.md diff --git a/PLANETS.md b/PLANETS.md new file mode 100644 index 0000000..5857748 --- /dev/null +++ b/PLANETS.md @@ -0,0 +1 @@ +Mercury\rgit show Вы научились смотреть изменения в последних коммитах с помощью git log, но что, если нужно выбрать коммит из середины списка?\nДля этого используйте команду git show \u0026lt;хеш_коммита\u0026gt;.\n$ git show d8756eb b317d23 (HEAD -\u0026gt; main) Revert \u0026#34;delete PEOPLE.md\u0026#34; diff --git a/PEOPLE.md b/PEOPLE.md new file mode 100644 index 0000000..2921ab7 --- /dev/null +++ b/PEOPLE.md @@ -0,0 +1 @@ +Albert Einstein fd420ae add PLANETS.md diff --git a/PLANETS.md b/PLANETS.md new file mode 100644 index 0000000..5857748 --- /dev/null +++ b/PLANETS.md @@ -0,0 +1 @@ +Mercury\rgit grep Если вам нужно найти конкретное слово или набор слов, используйте команду git grep \u0026lt;текст\u0026gt;. Для поиска независимо от регистра добавьте параметр -i.\n$ git grep -i einstein PEOPLE.md:Albert Einstein\rgit blame При работе в команде вам порой нужно будет узнать, кто менял файл и в каком коммите. Для этого используйте команду git blame \u0026lt;имя_файла\u0026gt;.\n$ git blame PLANETS.md fd420ae3 (moroz 2025-02-24 12:24:27 +0300 1) Mercury 00000000 (Not Committed Yet 2025-02-25 16:36:40 +0300 2) Venus\rОбратите внимание, что выводятся даже файлы, которые еще не попали в коммит.\nДополнительная информация Просмотр истории коммитов ","date":"2025-02-23","id":15,"permalink":"/docs/git/history/","summary":"\u003cp\u003eДля понимания принципов работы Git нужно уяснить несколько моментов:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eВетка представляет собой \u003cstrong\u003eодносвязный список\u003c/strong\u003e, т.е. каждый\nновый коммит базируется на предыдущем.\u003c/li\u003e\n\u003cli\u003eGit стремится двигаться только вперед. Удаление файла —\nэто, как правило, новый коммит, а не изменение старого.\u003c/li\u003e\n\u003cli\u003eВ любой момент разработчик может посмотреть изменения от самого первого\nдо последнего коммита.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cimg src=\"/images/git-branch-1.png\"\u003e\r\n\u003cp\u003eБлагодаря этим принципам Git является строго упорядоченной системой версий, и\nработать с историей изменений в нем очень удобно.\u003c/p\u003e","tags":[],"title":"История"},{"content":"Как мы уже объясняли, Git стремится двигаться только вперед и представляет собой односвязный список.\nНо это упрощенная модель из всего одной ветки main. В реальных проектах Git используется ряд односвязных списков, связанных между собой.\nВетка представляет собой последовательность коммитов в хронологическом порядке. Но точнее будет сказать, что ветка — это указатель на один из коммитов. С каждым новым коммитом ветка автоматически сдвигается, а коммит создает ссылку на родительский.\nВетки помогают отделить основной проект от параллельно разрабатываемых задач. К примеру, над open source проектами вместе работает множество людей, и разработчики создают отдельные ветки для избежания путаницы. Когда разработчик заканчивает работу над своей задачей, он создает merge request и сливает свою ветку с основной.\nОбратите внимание\nВетка main/master — это не какая-то особенная ветка. Она обладает теми же свойствами, как и все остальные, да и называться может как угодно. Просто она создается первой, и поэтому считается главной.\nСоздание веток Есть два варианта, как начать работать с новой веткой:\nСоздайте ветку командой git branch \u0026lt;имя_ветки\u0026gt;, а затем переключитесь на нее командой git checkout \u0026lt;имя_ветки\u0026gt;; Создайте и сразу же переключитесь на новую ветку командой git checkout -b \u0026lt;имя_ветки\u0026gt;. $ git checkout -b feature Switched to a new branch \u0026#39;feature\u0026#39;\rКомандой git branch также можно посмотреть список имеющихся веток. Для этого введите ее без аргументов.\n$ git branch * feature # Символ \u0026#34;*\u0026#34; указывает на активную ветку main\rТеперь вы можете спокойно работать с файлами, основную ветку это не затронет. Сделайте какой-нибудь коммит, например:\n$ echo \u0026#39;Awesome feature #1\u0026#39; \u0026gt; FEATURES.md $ git add FEATERUS.md $ git commit -m \u0026#39;add FEATURE.md\u0026#39;\rИзучите с помощью git log, что происходит с ветками и коммитами. Добавьте параметр --all, чтобы видеть историю всех веток, а не только активной.\n$ git log --all --oneline 85c5af2 (HEAD -\u0026gt; feature) add FEATURE.md 487b3bd (origin/main, main) update README.md PLANETS.md b317d23 Revert \u0026#34;delete PEOPLE.md\u0026#34; fd420ae add PLANETS.md d8756eb delete PEOPLE.md 3810583 add PEOPLE.md 5811348 add README.md\rHEAD — это указатель на последний коммит и на активную ветку. Сейчас он указывает на ветку feature. Если вы создадите новый коммит и/или ветку, HEAD передвинется на шаг вперед. А если переключитесь на предыдущий коммит командой git checkout 487b3bd, то на шаг назад.\nСлияние веток Fast-forward На данный момент ветка feature находится на один шаг впереди от ветки main. При этом в ветке main изменений не было. Это очень простая ситуация, так как одна ветка буквально продолжает другую.\nСхематично это выглядит так:\nПеред началом слияния убедитесь, что вы находитесь в той ветке, куда хотите влить другую. Перейдите в ветку main и выполните из нее команду git merge \u0026lt;имя_ветки\u0026gt;\n$ git merge feature Updating 487b3bd..85c5af2 Fast-forward FEATURES.md | 1 + 1 file changed, 1 insertion(+) create mode 100644 FEATURES.md\rОбратите внимание на запись fast-forward. Она означает, что Git просто перенес указатель ветки вперед, так как ветка feature была прямым потомком.\nТрехстороннее слияние Усложним задачу. Сделайте два новых коммита в ветке feature, а затем еще один в ветке main, как показано ниже:\n$ git checkout feature $ git echo \u0026#39;Awesome feature #2\u0026#39; \u0026gt;\u0026gt; FEATURES.md $ git commit -a -m \u0026#39;update FEATURES.md\u0026#39; $ sed -i \u0026#39;s/Venus/Mars/\u0026#39; PLANETS.md $ git commit -a -m \u0026#39;update PLANETS.md\u0026#39; $ git checkout main $ sed -i \u0026#39;s/Venus/Jupiter/\u0026#39; PLANETS.md $ git commit -a -m \u0026#39;update PLANETS.md\u0026#39;\rТеперь ситуация выглядит так:\nСлияние методом fast-forward невозможно, так как в ветке main появился еще один коммит. В этом случае Git автоматически выполнит трехстороннее слияние на основе последних коммитов обеих веток и общего родительского коммита.\nУдостоверьтесь, что находитесь в ветке main, а затем выполните команду слияния.\n$ git merge feature Auto-merging PLANETS.md CONFLICT (content): Merge conflict in PLANETS.md Automatic merge failed; fix conflicts and then commit the result.\u0026#39;\rОднако Git выдал ошибку merge conflict. Почему это произошло?\nКонфликт слияния Вернемся к командам, которые вы ввели ранее, и найдем виновников.\n$ git checkout feature sed -i \u0026#39;s/Venus/Mars/\u0026#39; PLANETS.md $ git checkout main sed -i \u0026#39;s/Venus/Jupiter/\u0026#39; PLANETS.md\rОдин из файлов, которые вы пытаетесь объединить, содержит противоречащие записи в разных ветках. Обнаружив конфликт слияния, Git остановит операцию и попросит вас это исправить.\nОбратите внимание\nВы не сможете перейти в другую ветку, пока не разрешите конфликт слияния.\nЧтобы просмотреть текущие конфликты, воспользуйтесь командой git status.\n$ git status On branch main Your branch is ahead of \u0026#39;origin/main\u0026#39; by 2 commits. (use \u0026#34;git push\u0026#34; to publish your local commits) You have unmerged paths. (fix conflicts and run \u0026#34;git commit\u0026#34;) (use \u0026#34;git merge --abort\u0026#34; to abort the merge) Changes to be committed: modified: FEATURES.md Unmerged paths: (use \u0026#34;git add \u0026lt;file\u0026gt;...\u0026#34; to mark resolution) both modified: PLANETS.md\rОткройте в директории вашего проекта проблемный файл PLANETS.md. Вы увидите, что Git разметил его маркерами конфликта. Ваша задача — оставить в файле только один вариант (или изменить оба) и удалить маркеры конфликта.\nMercury \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD Jupiter ======= Mars \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; feature\rК примеру, отредактируйте файл так, как показано ниже, и сохраните его:\nMercury Jupiter Mars\rДобавьте файл в индекс командой git add, и Git пометит конфликт как разрешенный. Теперь создайте коммит слияния командой git commit. Откроется редактор, где вам предложат изменить название коммита или оставить название по умолчанию. После этого шага операция трехстороннего слияния завершится.\n$ git commit [main 9d61b3e] Merge branch \u0026#39;feature\u0026#39;\rПеребазирование Есть еще один способ перенести изменения из одной ветки в другую: перебазирование. В чем отличие?\nСлияние — на общий родительский коммит наслаиваются изменения из последних коммитов обеих веток; Перебазирование — коммиты с изменениями из одной ветки последовательно переносятся на другую ветку. Принципиальная разница заключается в истории коммитов. Слияние запоминает всю историю изменений в ветках и сам коммит слияния. Перебазирование перемещает коммиты из одной ветки в другую, создавая линейную историю.\nВажно!\nНе используйте git rebase для коммитов, уже отправленных в публичный репозиторий. Помните, что этой операцией вы создаете новые коммиты. Другим людям придется заново выполнять слияние, что приведет к неразберихе.\nВернитесь к состоянию репозитория непосредственно перед слиянием с помощью git reset и вместо слияние выполните перебазирование.\n$ git reset --hard HEAD~\rОбратите внимание\nСлияние делается из той ветки, куда вы вливаете изменения, а перебазирование — наоборот.\n$ git checkout feature $ git rebase main Auto-merging PLANETS.md CONFLICT (content): Merge conflict in PLANETS.md error: could not apply 05994f2... update PLANETS.md\rКак и в случае со слиянием, возникает конфликт, который надо разрешить вручную, внеся изменения в файл.\nПосле этого выполните два шага:\nЗавершите процедуру перебазирования; $ git add PLANETS.md $ git rebase --continue [detached HEAD 78ed0d2] update PLANETS.md 1 file changed, 1 insertion(+) Successfully rebased and updated refs/heads/feature.\rПереключитесь на ветку main и выполните слияние методом fast-forward. $ git checkout main $ git merge feature Updating e8d83d8..78ed0d2 Fast-forward FEATURES.md | 1 + PLANETS.md | 1 + 2 files changed, 2 insertions(+)\rГотово. Результат получился абсолютно таким же, как и после обычного слияния, разница только в истории коммитов.\nУдаление веток После завершения слияния обе ветки находятся в одинаковом состоянии, так что ненужную ветку можно удалить. Это делается командой git branch -d \u0026lt;имя_ветки\u0026gt;.\n$ git branch -d feature Deleted branch feature (was 05994f2).\rДополнительная информация Основы ветвления и слияния Стратегии ветвления ","date":"2025-02-23","id":16,"permalink":"/docs/git/branches/","summary":"\u003cp\u003eКак мы уже \u003ca href=\"/docs/git/history\"\u003eобъясняли\u003c/a\u003e, Git стремится двигаться только вперед\nи представляет собой односвязный список.\u003c/p\u003e\n\u003cp\u003eНо это упрощенная модель из всего одной \u003cstrong\u003eветки\u003c/strong\u003e main.\nВ реальных проектах Git используется ряд односвязных списков, связанных\nмежду собой.\u003c/p\u003e","tags":[],"title":"Ветки"},{"content":"Отправка изменений Локальные ветки не синхронизируются автоматически с удаленными. Если вы сейчас используете команду git push, то отправите в удаленный репозиторий только ветку main, которую связали ранее.\nОтправьте в удаленный репозиторий ветку feature. Правда, вы ее недавно удалили, так что создайте заново.\n$ git checkout -b feature $ git push origin feature Total 0 (delta 0), reused 0 (delta 0), pack-reused 0 remote: remote: Create a pull request for \u0026#39;feature\u0026#39; on GitHub by visiting: remote: https://github.com/morozov-ext/learning-repo/pull/new/feature remote: To github.com:morozov-ext/learning-repo.git * [new branch] feature -\u0026gt; feature\rА теперь введите команду git branch -vv, которая покажет локальные ветки и связанные с ней удаленные.\n$ git branch -vv feature 78ed0d2 update PLANETS.md * main 78ed0d2 [origin/main] update PLANETS.md\rОбратите внимание на запись origin/main. Это — ветка слежения, то есть локальная ветка, которая передает информацию об удаленной. Если другой разработчик внесет изменения в эту ветку на GitHub, вы сможете узнать об этом с помощью ветки слежения и скопировать себе актуальную версию.\nОднако напротив ветки feature такая запись отсутствует, потому что мы отправили ее в репозиторий, но не настроили на слежение. Удостоверьтесь, что находитесь в нужной ветке и выполните команду git branch -u \u0026lt;удаленный_репозиторий\u0026gt;/\u0026lt;имя_ветки\u0026gt;.\n$ git branch -u origin/feature Branch \u0026#39;feature\u0026#39; set up to track remote branch \u0026#39;feature\u0026#39; from \u0026#39;origin\u0026#39;.\rНо проще делать это еще на этапе git push, добавив параметр -u.\n$ git push -u origin feature\rПовторите команду git branch -vv и убедитесь, что ветка слежения origin/feature появилась.\n$ git branch -vv * feature 78ed0d2 [origin/feature] update PLANETS.md main 78ed0d2 [origin/main] update PLANETS.md\rВажно!\nИнформация из git branch -vv может быть устаревшей. Эта команда не обращается к серверам, а использует локальный кэш. Кэш обновляется только при командах git push, git pull и git fetch.\nПолучение изменений В совместных проектах вам часто придется обновлять свою локальную копию репозитория на основе изменений от других разработчиков. Это можно сделать двумя способами.\ngit fetch Команда git fetch \u0026lt;удаленный_репозиторий\u0026gt; загружает из удаленного репозитория все изменения, но не заменяет автоматически локальные файлы. Это удобно, так как вы можете сначала изучить эти изменения, а уже потом применить их командой git merge \u0026lt;удаленный_репозиторий\u0026gt;/\u0026lt;имя_ветки\u0026gt;.\n$ git fetch origin $ git merge origin/feature\rgit pull Команда git pull \u0026lt;удаленный_репозиторий\u0026gt; \u0026lt;имя_ветки\u0026gt; совмещает git fetch и git merge. Все изменения применяются автоматически.\n$ git pull origin feature From github.com:morozov-ext/learning-repo * branch feature -\u0026gt; FETCH_HEAD Already up to date.\rУдаление изменений Чтобы удалить ветку в в удаленном репозитории, используйте команду git push \u0026lt;удаленный_репозиторий\u0026gt; --delete \u0026lt;имя_ветки\u0026gt;.\n$ git push origin --delete feature To github.com:morozov-ext/learning-repo - [deleted] feature\rДополнительная информация Удаленные ветки ","date":"2025-02-23","id":17,"permalink":"/docs/git/remote-branches/","summary":"\u003ch2 id=\"отправка-изменений\"\u003eОтправка изменений\u003c/h2\u003e\n\u003cp\u003eЛокальные ветки не синхронизируются автоматически с удаленными. Если вы сейчас\nиспользуете команду \u003cnobr\u003e\u003ccode\u003egit push\u003c/code\u003e\u003c/nobr\u003e, то отправите в удаленный репозиторий только\nветку \u003ccode\u003emain\u003c/code\u003e, которую связали\n\u003ca href=\"/docs/git/integration/#%d1%81%d0%b2%d1%8f%d0%b7%d1%8b%d0%b2%d0%b0%d0%bd%d0%b8%d0%b5-%d0%bb%d0%be%d0%ba%d0%b0%d0%bb%d1%8c%d0%bd%d0%be%d0%b3%d0%be-%d0%b8-%d1%83%d0%b4%d0%b0%d0%bb%d0%b5%d0%bd%d0%bd%d0%be%d0%b3%d0%be-%d1%80%d0%b5%d0%bf%d0%be%d0%b7%d0%b8%d1%82%d0%be%d1%80%d0%b8%d0%b5%d0%b2\"\u003eранее\u003c/a\u003e.\u003c/p\u003e","tags":[],"title":"Удаленные ветки"},{"content":"","date":"2024-10-22","id":18,"permalink":"/docs/git/flags/","summary":"","tags":[],"title":"Параметры"},{"content":"Link to valuable, relevant resources.\n","date":"2024-02-27","id":19,"permalink":"/docs/resources/","summary":"\u003cp\u003eLink to valuable, relevant resources.\u003c/p\u003e","tags":[],"title":"Resources"},{"content":"","date":"2023-09-07","id":20,"permalink":"/privacy/","summary":"","tags":[],"title":"Privacy Policy"},{"content":"","date":"2023-09-07","id":21,"permalink":"/","summary":"","tags":[],"title":"Руководства"},{"content":"","date":"0001-01-01","id":22,"permalink":"/categories/","summary":"","tags":[],"title":"Categories"},{"content":"","date":"0001-01-01","id":23,"permalink":"/contributors/","summary":"","tags":[],"title":"Contributors"},{"content":"","date":"0001-01-01","id":24,"permalink":"/tags/","summary":"","tags":[],"title":"Tags"}]